// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */
class Memory {
    static Array memory;
    static int freeList;

    /** Initializes memory parameters. */
    function void init() {
        let memory = 0;
        let freeList = 2048;
        let freeList[0] = 16383 - 2048 + 1;
        let freeList[1] = null;
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        var int free, segment;
        let free = freeList;
        while(true) {
            if(free[0] > size) {
                let free[0] = free[0] - size - 1;
                let segment = free + free[0] + 1;
                let segment[-1] = size + 1;
                return segment;
            }
            if(free[1] = null) {
                return -1;
            }
            let free = free[1];
        }
        return -1;
    }

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
        var int segment;
        let segment = object - 1;
        let segment[1] = freeList;
        let freeList = segment;
        return;
    }
}
