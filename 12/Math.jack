// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while(i < 16) {
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int i, sum, shifted_x;
        let sum = 0;
        let i = 0;
        let shifted_x = x;
        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
        var int x_abs, y_abs, pos_neg, q;
        let pos_neg = 1;
        let x_abs = x;
        if (x_abs < 0) {
            let x_abs = -x_abs;
            let pos_neg = -pos_neg;
        }
        let y_abs = y;
        if (y_abs < 0) {
            let y_abs = -y_abs;
            let pos_neg = -pos_neg;
        }
        if (x_abs < y_abs) {
            return 0;
        }
        let q = Math.divide(x_abs, y_abs+y_abs);
        if ((x_abs - (2*q*y_abs)) < y_abs) {
            return (pos_neg * (q+q));
        } else {
            return (pos_neg * (q+q+1));
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, y, two_j, tmp;
        let i = 7;
        let y = 0;
        while(-1 < i) {
            let tmp = (y + twoToThe[i]) * (y + twoToThe[i]);
            if( ((tmp < x) | (tmp = x)) & (tmp > 0) ) {
                let y = y + twoToThe[i];
            }
            let i = i-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the jth bit of x. */
    function boolean bit(int x, int j) {
        return ((x & twoToThe[j]) = twoToThe[j]);
    }
}
